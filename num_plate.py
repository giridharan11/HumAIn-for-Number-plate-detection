# -*- coding: utf-8 -*-
"""Num_Plate

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wrkiC6ul-uOIDuSyYIKmMzjqS04Nw1A_
"""

!sudo apt install tesseract-ocr
!pip install pytesseract

import os
from skimage.io import imread
from skimage.filters import threshold_otsu
import matplotlib.pyplot as plt
import pandas as pd
from PIL import Image
import requests
from io import BytesIO
import numpy as np
import cv2
from google.colab.patches import cv2_imshow
from skimage import measure
from skimage.measure import regionprops
import matplotlib.patches as patches
import csv
import pytesseract
from skimage.transform import resize
from skimage import measure
from skimage.measure import regionprops
import matplotlib.patches as patches
from sklearn.svm import SVC
from sklearn.model_selection import cross_val_score
from sklearn.externals import joblib
from skimage.io import imread
from skimage.filters import threshold_otsu
import matplotlib.pyplot as plt
import cv2
import pytesseract 
import sklearn.externals.joblib

# car image -> grayscale image -> binary image
import imutils
data = pd.read_json ('/content/Indian_Number_plates.json',lines=True)
csvFile = open('Dataset.csv', 'w') 
writer = csv.writer(csvFile)
writer.writerow(['ImageURL','x1','y1','x2','y2','imgWidth','imgHeight'])
for num in range(len(data)):
  for i in data['annotation'][num]:
    URL = data['content'][num]
    x1=int(i['points'][0]['x'] * i['imageWidth'])
    y1=int(i['points'][0]['y'] * i['imageHeight'])
    x2=int(i['points'][1]['x'] * i['imageWidth'])
    y2=int(i['points'][1]['y'] * i['imageHeight'])
    imgWidth = i['imageWidth']
    imgHeight = i['imageHeight']
    writer.writerow([URL,x1,y1,x2,y2,imgWidth,imgHeight])
csvFile.close()

  
for num in range(19,20):
  url = data['content'][num]
  response = requests.get(url)
  #img = Image.open(BytesIO(response.content)).convert('RGB')
  img = Image.open(BytesIO(response.content)).convert('L')
  #cv2_image = cv2.cvtColor(np.array(img),cv2.COLOR_RGB2)
  car_image = np.array(img)
  # car_image = imread("car.png", as_gray=True)
  # it should be a 2 dimensional array
  #print(car_image.shape)
    

  

  label_image = measure.label(car_image)
  plate_dimensions = (0.03*label_image.shape[0], 0.08*label_image.shape[0], 0.15*label_image.shape[1], 0.3*label_image.shape[1])
  plate_dimensions2 = (0.08*label_image.shape[0], 0.2*label_image.shape[0], 0.15*label_image.shape[1], 0.4*label_image.shape[1])
  min_height, max_height, min_width, max_width = plate_dimensions
  plate_objects_cordinates = []
  plate_like_objects = []
  fig, (ax1) = plt.subplots(1)
  ax1.imshow(img, cmap="gray")
  flag =0
  for region in regionprops(label_image):

      if region.area < 50:

          continue

      min_row, min_col, max_row, max_col = region.bbox


      region_height = max_row - min_row
      region_width = max_col - min_col

      if region_height >= min_height and region_height <= max_height and region_width >= min_width and region_width <= max_width and region_width > region_height:
          flag = 1
          plate_like_objects.append(car_image[min_row:max_row,
                                    min_col:max_col])
          plate_objects_cordinates.append((min_row, min_col,
                                           max_row, max_col))
          rectBorder = patches.Rectangle((min_col, min_row), max_col - min_col, max_row - min_row, edgecolor="red",
                                         linewidth=2, fill=False)
          ax1.add_patch(rectBorder)
      if(flag == 1):
          plt.show()
      if(flag==0):
          min_height, max_height, min_width, max_width = plate_dimensions2
          plate_objects_cordinates = []
          plate_like_objects = []

          fig, ax1 = plt.subplots(1)
          ax1.imshow(img, cmap="gray")


      for region in regionprops(label_image):
          if region.area < 50:

              continue

          min_row, min_col, max_row, max_col = region.bbox


          region_height = max_row - min_row

          if region_height >= min_height and region_height <= max_height and region_width >= min_width and region_width <= max_width and region_width > region_height:

              plate_like_objects.append(car_image[min_row:max_row,
                                        min_col:max_col])
              plate_objects_cordinates.append((min_row, min_col,
                                               max_row, max_col))
              rectBorder = patches.Rectangle((min_col, min_row), max_col - min_col, max_row - min_row, edgecolor="red",
                                             linewidth=2, fill=False)
              print(max_col,min_col,max_row,min_row)
              plt.axis([min_col, max_col,max_row, min_row])
              ax1.axis('off')
              plt.savefig('temp.jpg')
              
              



              ax1.add_patch(rectBorder)

      plt.show()

  text = pytesseract.image_to_string(Image.open("temp.jpg"),lang='eng')    
  print(text)